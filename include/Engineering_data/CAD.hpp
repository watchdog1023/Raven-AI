#ifndef CAD                      
#define CAD

#include<string>
#include<iostream>
#include<fstream>
#include<streambuf>
#ifdef __cplusplus 201402L //C++14
    #include<experimental/filesystem>
#elif __cplusplus 201703L //C++17
    #include<filesystem>
#else
    #error PLease use a C++14/17 compatiable version of gcc
#endif

/*ID's
Raven 927264789071546705596889147393451300315962
Lexa 103571928672522052260658578708747375146140
Lara 371255035946132864459227962310701892488529
Ciri 164059234287267698811552356795217783210005
*/


using namespace std;

namespace CAD
{
    bool exist;
    string filename;
    namespace 
        {
         unsigned long long int ID[] = {927264789071546705596889147393451300315962,103571928672522052260658578708747375146140,371255035946132864459227962310701892488529,164059234287267698811552356795217783210005};
            void check_watermark()
                {
                    std::ifstream t(filename);
                    string contents((std::istreambuf_iterator<char>(t)),std::istreambuf_iterator<char>());
                    size_t found = contents.find("//Made by"); 
                    if (found != string::npos) 
                        {
                            #ifdef DEBUG
                                cout << "Found WaterMark" << endl; 
                                size_t raven = contents.find("927264789071546705596889147393451300315962"); 
                                size_t lexa = contents.find("103571928672522052260658578708747375146140"); 
                                size_t lara = contents.find("371255035946132864459227962310701892488529"); 
                                size_t ciri = contents.find("164059234287267698811552356795217783210005"); 
                                if (raven != string::npos)
                                    {
                                        cout << "This was generated by raven" << endl;
                                        #ifdef RAVEN_COME_SKYKRU
                                            cout << "This was generated by Me" << endl;
                                        #endif
                                    }
                                else if (lexa != string::npos) 
                                    {
                                        cout << "This was generated by lexa" << endl;
                                        #ifdef LEXA_COME_TREEKRU
                                            cout << "This was generated by Me" << endl;
                                        #endif
                                    }
                                else if (lara != string::npos) 
                                    {
                                        cout << "This was generated by lara" << endl;
                                        #ifdef LARA_TOMB
                                            cout << "This was generated by Me" << endl;
                                        #endif
                                    }
                                else if (ciri != string::npos) 
                                    {
                                        cout << "This was generated by ciri" << endl;
                                        #ifdef CIRI_HOUSE_OF_CAT
                                            cout << "This was generated by Me" << endl;
                                        #endif
                                    }
                            #endif
                        }
                    else
                        {
                            #ifdef DEBUG
                                cout << "Did not find WaterMark" << endl;
                                cout << "Adding Watermark" << endl;
                            #endif
                            ofstream new_file(filename);
                            if (new_file.is_open())
                                {
                                    #ifdef RAVEN_COME_SKYKRU
                                        new_file << "//Made by Raven-AI (" + ID[0] + ")" << endl;
                                    #elif LEXA_COME_TREEKRU
                                        new_file << "//Made by Lexa-AI (" + ID[1] + ")" << endl;
                                    #elif LARA_TOMB
                                        new_file << "//Made by Lara-AI (" + ID[2] + ")" << endl;
                                    #elif CIRI_HOUSE_OF_CAT
                                        new_file << "//Made by Ciri-AI (" + ID[3] + ")" << endl;
                                    #endif
                                    new_file << contents;
                                    new_file.close();
                                }
                        }
                }
        }
        }
    void CAD_Open(string filename_open)
        {
            if(filename.substr(filename.find_last_of(".") + 1) == "scad") 
                {
                    #ifdef __cplusplus 201402L 
                        exist = std::experimental::filesystem::exists(filename);
                    #elif __cplusplus 201703L 
                        exist = std::filesystem::exists(filename);
                    #else
                        #error PLease use a C++14/17 compatiable version of gcc
                    #endif
                } 
            else 
                {
                    #ifdef DEBUG
                        std::cout << "No...Just No!" << std::endl;
                        std::cout << "Wrong File Format,please use a scad format" << std::endl;
                    #endif
                }
            
        }
    void add_scad_file(string project_name,string import_name)
        {
            std::ifstream t(project_name);
            if(exist)
                {
                    string contents_old((std::istreambuf_iterator<char>(t)),std::istreambuf_iterator<char>());
                    ofstream new_file(project_name);
                    if (new_file.is_open())
                        {
                            new_file << "include <"+ import_name +".scad>";
                            new_file << contents_old;
                            new_file.close();
                        }
                }
        }
    void CAD_close()
    {
        check_watermark();
    }
}

#endif